

// ===== controllers/adminController.js =====

import User from '../models/user.js';
import Job from "../models/Job.js";
import Application from "../models/applicationModel.js";


// Create a new user (or any other item)
export const createUser = async (req, res) => {
  const { name, email, password  } = req.body;
  try {
    const newUser = new User({ name, email, password });
    await newUser.save();
    res.status(201).json({ message: 'User created successfully', user: newUser });
  } catch (err) {
    res.status(500).json({ error: 'Failed to create user' });
  }
};

// Get all users (Admin only)
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password'); // Exclude password
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch users' });
  }
};

// Update a user by ID (Admin only)
export const updateUser = async (req, res) => {
  const { id } = req.params;
  const { name, email, role } = req.body;

  try {
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { name, email, role },
      { new: true, runValidators: true }
    ).select('-password');

    if (!updatedUser) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.status(200).json(updatedUser);
  } catch (err) {
    res.status(500).json({ error: 'Failed to update user' });
  }
};

// Delete a user by ID (Admin only)
export const deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.status(200).json({ message: 'User deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete user' });
  }
};

export const getDashboardStats = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const totalJobs = await Job.countDocuments();
    const totalApplications = await Application.countDocuments();

    res.status(200).json({
      totalUsers,
      totalJobs,
      totalApplications,
    });
  } catch (error) {
    console.error("Dashboard Stats Error:", error);
    res.status(500).json({ error: "Failed to fetch dashboard stats" });
  }
};


// ===== controllers/applicationController.js =====

// controllers/applicationController.js
import Job from '../models/Job.js';
import Application from '../models/applicationModel.js';
import User from '../models/user.js';

// USER: Apply for a Job (with file upload)
export const applyToJob = async (req, res) => {
  try {
    const jobId = req.params.jobId;
    const userId = req.user.id;
    const { message } = req.body;

    if (!req.file || !message) {
      return res.status(400).json({ error: 'Resume file and message are required' });
    }

    const resumePath = req.file.path;

    // Check if job exists
    const job = await Job.findById(jobId);
    if (!job) return res.status(404).json({ error: 'Job not found' });

    // Check for duplicate application
    const existing = await Application.findOne({ job: jobId, applicant: userId });
    if (existing) {
      return res.status(400).json({ error: 'You have already applied for this job' });
    }

    // Create new application
    const application = await Application.create({
      job: jobId,
      applicant: userId,
      resumeUrl: resumePath,
      message,
    });

    // Optional: Save applicant ID to job model (if needed)
    if (!job.applicants.includes(userId)) {
      job.applicants.push(userId);
      await job.save();
    }

    res.status(201).json({ message: 'Application submitted successfully', application });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to apply for job' });
  }
};

// ADMIN: Get all applications
export const getAllApplications = async (req, res) => {
  try {
    const applications = await Application.find()
      .populate('job', 'title')
      .populate('applicant', 'name email');

    res.status(200).json(applications);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error fetching applications' });
  }
};

// ADMIN: Update application status
export const updateApplicationStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const { id } = req.params;

    if (!status) {
      return res.status(400).json({ error: 'Status is required' });
    }

    const application = await Application.findByIdAndUpdate(
      id,
      { status },
      { new: true }
    );

    if (!application) {
      return res.status(404).json({ error: 'Application not found' });
    }

    res.status(200).json({ message: 'Status updated', application });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to update application' });
  }
};

// USER: Get own applications
export const getMyApplications = async (req, res) => {
  try {
    const applications = await Application.find({ applicant: req.user.id })
      .populate('job', 'title company location deadline') // show job info
      .sort({ createdAt: -1 });

    res.status(200).json(applications);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error fetching your applications' });
  }
};

// @desc    Update user profile
// @route   PUT /api/users/profile
// @access  Private
// controllers/userController.js
export const updateUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.params.id); // <-- Use param id
    if (!user) return res.status(404).json({ error: 'User not found' });

    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;
    user.skills = req.body.skills || user.skills;
    user.bio = req.body.bio || user.bio;

    if (req.file) {
      user.avatar = req.file.path;
    }

    const updatedUser = await user.save();

    res.status(200).json({
      message: 'Profile updated successfully',
      user: {
        id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        skills: updatedUser.skills,
        bio: updatedUser.bio,
        avatar: updatedUser.avatar,
        role: updatedUser.role,
      }
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Profile update failed' });
  }
};


// ===== controllers/auth.js =====

import jwt from 'jsonwebtoken';

export const login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });

  // password check skipped for brevity

  const token = jwt.sign(
    { id: user._id, role: user.role },     // payload
    process.env.JWT_SECRET,               // secret key
    { expiresIn: '7d' }                   // optional: token expiry
  );

  res.status(200).json({
    token,
    role: user.role,
    user: { id: user._id, name: user.name }
  });
};


// ===== controllers/authController.js =====

// controllers/authController.js
import User from '../models/user.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

export const register = async (req, res) => {
  const { name, email, password, role } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: 'Email already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({ name, email, password: hashedPassword, role });

    res.status(201).json({ message: 'Registration successful' });
  } catch (err) {
    console.error('Register error:', err.message); // âœ… Add this line for debugging
    res.status(500).json({ error: 'Server error' }); // âœ… Keep this response
  }
};



export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.status(200).json({
      message: 'Login successful',
      token
    });
  } catch (err) {
    console.error('Login error:', err); // ðŸ‘ˆ Helpful for debugging
    res.status(500).json({ error: 'Login failed' });
  }
};


// ===== controllers/generateResumeController.js =====

import axios from 'axios';
import dotenv from 'dotenv';
import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';

dotenv.config();

export const generateResume = async (req, res) => {
  try {
    const { name, email, phone, skills, experience, education } = req.body;

    if (!name || !skills || !experience || !education) {
      return res.status(400).json({ error: 'Missing required resume fields' });
    }

    const prompt = `
You are a professional resume writer. Based on the details below, generate a polished resume in plain text format:

Name: ${name}
Email: ${email}
Phone: ${phone}
Skills: ${skills.join(', ')}
Experience: ${experience}
Education: ${education}

Write it in a clean, professional tone.
`;

    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama3-70b-8192',
        messages: [
          { role: 'system', content: 'You are an AI that generates professional resumes.' },
          { role: 'user', content: prompt }
        ]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.GROQ_API_KEY}`
        }
      }
    );

    const resumeText = response.data.choices[0].message.content;


    // âœ… Ensure the 'resumes' directory exists
const resumeDir = path.join('resumes');
if (!fs.existsSync(resumeDir)) {
  fs.mkdirSync(resumeDir);
}

    // âœ… Generate PDF
    const doc = new PDFDocument();
    const filePath = path.join('resumes', `${name.replace(/\s+/g, '_')}_resume.pdf`);
    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);
    doc.fontSize(12).text(resumeText, { align: 'left' });
    doc.end();

    writeStream.on('finish', () => {
      res.download(filePath, `${name}_resume.pdf`, err => {
        if (err) {
          console.error('Download error:', err);
        }
        // Clean up file after sending
        fs.unlink(filePath, () => {});
      });
    });

  } catch (error) {
    console.error('Resume generation failed:', error.response?.data || error.message);
    res.status(error.response?.status || 500).json({
      error: error.response?.data?.error?.message || error.message
    });
  }
};


// ===== controllers/groqController.js =====

import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();
export const chatWithGroq = async (req, res) => {
  try {
    const { model, messages } = req.body;
    // :white_check_mark: Input validation
    if (!model || !Array.isArray(messages) || !messages[0]?.content) {
      return res.status(400).json({ error: 'Model and valid messages are required' });
    }
    // :white_check_mark: Call Groq API
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model,
        messages
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.GROQ_API_KEY}`
        }
      }
    );
    // :white_check_mark: Send Groq's response to the client
    res.json(response.data);
  } catch (error) {
    console.error('Groq API Error:', error.response?.data || error.message);
    res.status(error.response?.status || 500).json({
      error: error.response?.data?.error?.message || error.message
    });
  }
};

// ===== controllers/jobController.js =====

// controllers/jobController.js
import Job from '../models/Job.js';

export const postJob = async (req, res) => {
  try {
    const job = await Job.create({ ...req.body, postedBy: req.user.id });
    res.status(201).json(job);
  } catch (err) {
    res.status(500).json({ error: 'Server error while posting job' });
  }
};

export const getAllJobs = async (req, res) => {
  try {
    const jobs = await Job.find().populate('postedBy', 'name email');
    res.status(200).json(jobs);
  } catch (err) {
    res.status(500).json({ error: 'Error fetching jobs' });
  }
};

export const updateJob = async (req, res) => {
  try {
    const jobId = req.params.id;
    const updates = req.body;

    const job = await Job.findByIdAndUpdate(jobId, updates, {
      new: true,
      runValidators: true,
    });

    if (!job) {
      return res.status(404).json({ error: 'Job not found' });
    }

    res.status(200).json(job);
  } catch (err) {
    res.status(500).json({ error: 'Error updating job' });
  }
};



// ===== controllers/paymentController.js =====

import Stripe from "stripe";
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY); // keep in .env

export const createCheckoutSession = async (req, res) => {
  const { amount, purpose } = req.body; // Example: amount: 500, purpose: "Resume Download"

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'usd',
          product_data: {
            name: purpose,
          },
          unit_amount: amount, // in cents ($5 = 500)
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: `${process.env.CLIENT_URL}/payment-success`,
      cancel_url: `${process.env.CLIENT_URL}/payment-cancel`,
    });

    res.status(200).json({ url: session.url });
  } catch (error) {
  console.error("Stripe error:", error); // log full error
  res.status(500).json({ error: error.message });
}
}


// ===== controllers/uploadController.js =====

export const uploadFileController = async (req, res) => {
  try {
    if (!req.file || !req.file.path) {
      return res.status(400).json({ error: 'File upload failed' });
    }

    res.status(200).json({
      message: 'File uploaded successfully',
      url: req.file.path, // âœ… Cloudinary URL
    });
  } catch (error) {
    console.error('Cloudinary upload error:', error);
    res.status(500).json({ error: 'Something went wrong during upload' });
  }
};


// ===== models/Job.js =====

import mongoose from 'mongoose';

const jobSchema = new mongoose.Schema({
  title: String,
  description: String,
  location: String,
  salary: String,
  postedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Admin
  applicants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], // Users who applied
}, { timestamps: true });

export default mongoose.model('Job', jobSchema);


// ===== models/applicationModel.js =====

// models/applicationModel.js
import mongoose from 'mongoose';

const applicationSchema = new mongoose.Schema({
  applicant: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  job: { type: mongoose.Schema.Types.ObjectId, ref: 'Job', required: true },
  resumeUrl: { type: String, required: true },
  message: { type: String },
  status: {
    type: String,
    enum: ['pending', 'accepted', 'rejected'],
    default: 'pending',
  },
}, { timestamps: true });

export default mongoose.model('Application', applicationSchema);


// ===== models/user.js =====

// models/user.js
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },

  email: { type: String, unique: true, required: true },

  password: { type: String, required: true },

  role: {
    type: String,
    enum: ['admin', 'user'],
    default: 'user'
  },

  // Optional Profile Info
  bio: { type: String },
  avatar: { type: String }, // store URL to avatar or image path
}, {
  timestamps: true
});

export default mongoose.model('User', userSchema);


// ===== routes/adminRoutes.js =====

// routes/adminRoutes.js
import express from 'express';
import { getAllUsers, updateUser, deleteUser } from '../controllers/adminController.js';
import { verifyToken, isAdmin } from '../middleware/authMiddleware.js';
import { getDashboardStats } from "../controllers/adminController.js";


const router = express.Router();

// Admin-only access
router.get('/', verifyToken, isAdmin, getAllUsers);
router.put('/:id', verifyToken, isAdmin, updateUser);
router.delete('/:id', verifyToken, isAdmin, deleteUser);
router.get("/dashboard-stats", verifyToken, isAdmin, getDashboardStats);

export default router;



// ===== routes/applicationRoutes.js =====

// routes/applicationRoutes.js
import express from 'express';
import {
  applyToJob,
   getMyApplications,
  getAllApplications,
  updateApplicationStatus
} from '../controllers/applicationController.js';

import { verifyToken, isAdmin } from '../middleware/authMiddleware.js';

import upload from '../middleware/uploadMiddleware.js';


const router = express.Router();

// User applies to a specific job (file upload)
router.post('/apply/:jobId', verifyToken, upload.single('resume'), applyToJob);

// Admin gets all applications
router.get('/', verifyToken, isAdmin, getAllApplications);

// Admin updates application status
router.patch('/:id/status', verifyToken, isAdmin, updateApplicationStatus);

// User gets own applications
router.get('/my', verifyToken,getMyApplications );



export default router;


// ===== routes/authRoutes.js =====

import express from 'express';
import { register, login } from '../controllers/authController.js';

const router = express.Router();

router.post('/register', register);
router.post('/login', login);

export default router;


// ===== routes/groqRoutes.js =====

import express from 'express';
import { chatWithGroq } from '../controllers/groqController.js';
const router = express.Router();
router.post('/chat', chatWithGroq);
export default router;    //routes file


// ===== routes/jobRoutes.js =====

import express from 'express';
import {
  postJob,
  getAllJobs,
  updateJob,
} from '../controllers/jobController.js';
import { verifyToken, isAdmin } from '../middleware/authMiddleware.js';

const router = express.Router();

router.post('/', verifyToken, isAdmin, postJob);   // Only admin can post a job
router.get('/', getAllJobs);                       // Public route to view jobs
router.put('/:id', verifyToken, isAdmin, updateJob); // Admin can update a job

export default router;


// ===== routes/paymentRoutes.js =====

import express from 'express';
import { createCheckoutSession } from '../controllers/paymentController.js';
const router = express.Router();

router.post('/create-checkout-session', createCheckoutSession);

export default router;


// ===== routes/resumeRoutes.js =====

import express from 'express';
import { generateResume } from '../controllers/generateResumeController.js';

const router = express.Router();

router.post('/generate', generateResume);

export default router;


// ===== routes/uploadRoute.js =====

import express from 'express';
import multer from 'multer';
import { storage } from '../utils/cloudinary.js';
import { uploadFileController } from '../controllers/uploadController.js';

const router = express.Router();
const upload = multer({ storage });

router.post('/upload', upload.single('file'), uploadFileController);

export default router;


// ===== routes/userRoutes.js =====

import express from 'express';
import { createUser } from '../controllers/adminController.js';
import { updateUserProfile } from '../controllers/applicationController.js';
import { verifyToken } from '../middleware/authMiddleware.js';
import uploadAvatar from '../middleware/avatarUploadMiddleware.js';
const router = express.Router();

router.post('/', createUser); // POST /api/users
router.put(
  '/profile/:id',
  verifyToken,
  uploadAvatar.single('avathar'), // matches Postman field name
  updateUserProfile
);


export default router;


// ===== config/db.js =====

import mongoose from "mongoose";

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error.message);
    process.exit(1);
  }
};

export default connectDB;

// ===== server.js =====

import express from "express";
import dotenv from "dotenv";
dotenv.config();
// import User from '../models/User.js';   

const app = express();

import authRoutes from './routes/authRoutes.js';

import cors from "cors";    
import connectDB from "./config/db.js";
connectDB(); 

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

import userRoutes from './routes/userRoutes.js';

import adminRoutes from './routes/adminRoutes.js';

import resumeRoutes from './routes/resumeRoutes.js';

import jobRoutes from './routes/jobRoutes.js';

import applicationRoutes from './routes/applicationRoutes.js';

import paymentRoutes from './routes/paymentRoutes.js';

import groqRoutes from './routes/groqRoutes.js';
// Groq AI Chat Route
app.use('/api/groq', groqRoutes);

app.use('/api/payment', paymentRoutes);
app.use('/api/applications', applicationRoutes);
app.use('/api/jobs', jobRoutes);
app.use('/api/resume', resumeRoutes);
app.use('/api/users', userRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/admin', adminRoutes);


import fs from 'fs';
import path from 'path';

const uploadDir = path.join('uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}


// Basic Route
app.get('/', (req, res) => {
  res.send('Time Pro API is running...');
});


// Start Server
const PORT = process.env.PORT ;
app.listen(PORT, () => console.log(` Server running on port ${PORT}`));
